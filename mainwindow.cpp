#include "mainwindow.h"
#include "ui_mainwindow.h" // Generated by UIC
#include "dashboard.h"     // Include definition for DashboardWindow
#include <QMessageBox>
#include <QScreen>
#include <QGuiApplication>
#include <QPixmap>
#include <QDebug>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , dashboardWindow(nullptr) // Initialize pointer
{
    ui->setupUi(this);
    this->setWindowTitle(ui->centralwidget->windowTitle()); // Set title from UI
    setAttribute(Qt::WA_DeleteOnClose); // Ensure window is deleted when closed

    // Set the avatar placeholder
    // The path must match the alias in resources.qrc and the path used in the .ui file
    // Correcting the resource path based on common practice and your .ui file
    QPixmap avatarPixmap(":/new/prefix1/avatar_placeholder.png"); // Changed path
    if (!avatarPixmap.isNull()) {
        ui->label_avatar->setPixmap(avatarPixmap.scaled(ui->label_avatar->size(), Qt::KeepAspectRatio, Qt::SmoothTransformation));
        qDebug() << "Avatar pixmap loaded successfully."; // Debug output
    } else {
        qWarning("Could not load avatar_placeholder.png from resources.");
        ui->label_avatar->setText("No Avatar"); // Fallback text
    }

    centerWindow();
}

MainWindow::~MainWindow()
{
    // ui unique_ptr handles its own deletion
    // dashboardWindow is handled by its own WA_DeleteOnClose or manual deletion if shown then hidden
}

void MainWindow::centerWindow()
{
    QScreen *screen = QGuiApplication::primaryScreen();
    if (screen) {
        QRect screenGeometry = screen->availableGeometry(); // Use availableGeometry to avoid taskbars etc.
        int x = (screenGeometry.width() - this->width()) / 2;
        int y = (screenGeometry.height() - this->height()) / 2;
        this->move(x, y);
    }
}

void MainWindow::on_pushButton_submit_clicked()
{
    QString email = ui->lineEdit_email->text().trimmed();
    QString password = ui->lineEdit_password->text();

    if (email.isEmpty() || password.isEmpty()) {
        QMessageBox::warning(this, "Login Failed", "Please enter both email and password.");
        return;
    }

    // --- Dummy Authentication (Replace with your actual logic) ---
    if (email == "admin@example.com" && password == "password123") {
        QMessageBox::information(this, "Login Success", "Welcome!");

        // Create and show the dashboard window
        if (!dashboardWindow) { // Create only if it doesn't exist (or handle re-showing)
            dashboardWindow = new DashboardWindow(nullptr); // Pass nullptr for parent if it's a new top-level window
        }
        dashboardWindow->show();
        this->close(); // Close the login window

    } else {
        QMessageBox::critical(this, "Login Failed", "Invalid email or password.");
    }
}

void MainWindow::on_label_forgot_linkActivated(const QString &link)
{
    QMessageBox::information(this, "Forgot Password",
                             "Forgot password functionality is not yet implemented.\n"
                             "The link clicked was: " + link);
}
