#include "dashboard.h"
#include "ui_dashboard.h" // Generated by UIC
#include "mainwindow.h"    // To create login window on logout
#include <QMessageBox>
#include <QTableWidgetItem>
#include <QScreen>
#include <QGuiApplication>
#include <QHeaderView> // For table header properties
#include <QDebug> // Include for debugging
#include <QShowEvent> // Include for showEvent

DashboardWindow::DashboardWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::DashboardWindow)
    , loginWindow(nullptr)
{
    qDebug() << "Entering DashboardWindow constructor.";
    qDebug() << "Ui::DashboardWindow object created.";

    ui->setupUi(this);
    qDebug() << "setupUi finished for DashboardWindow.";

    this->setWindowTitle(ui->centralwidget->windowTitle());
    setAttribute(Qt::WA_DeleteOnClose);

    populateDashboardData();
    centerWindow();

    qDebug() << "DashboardWindow constructor finished.";
    // Table header customization is now in showEvent
}

DashboardWindow::~DashboardWindow()
{
    qDebug() << "DashboardWindow destructor called.";
    // ui unique_ptr handles its own deletion
}

void DashboardWindow::showEvent(QShowEvent *event)
{
    qDebug() << "DashboardWindow showEvent called.";

    // Table header customization moved here
    if (ui && ui->tableWidget_parking_log) {
        qDebug() << "Customizing table headers in showEvent.";
        ui->tableWidget_parking_log->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
        ui->tableWidget_parking_log->verticalHeader()->setVisible(false); // Hide vertical row numbers
        qDebug() << "Table headers customized in showEvent.";
    } else {
        qCritical() << "UI or tableWidget_parking_log is null during header customization in showEvent.";
    }

    // Call the base class implementation
    QMainWindow::showEvent(event);
    qDebug() << "DashboardWindow showEvent finished.";
}


void DashboardWindow::centerWindow()
{
    qDebug() << "Attempting to center DashboardWindow.";
    QScreen *screen = QGuiApplication::primaryScreen();
    if (screen) {
        QRect screenGeometry = screen->availableGeometry();
        int x = (screenGeometry.width() - this->width()) / 2;
        int y = (screenGeometry.height() - this->height()) / 2;
        this->move(x, y);
        qDebug() << "DashboardWindow centered.";
    } else {
        qDebug() << "Could not get primary screen to center window.";
    }
}

void DashboardWindow::populateDashboardData()
{
    qDebug() << "Populating dashboard data.";

    // Example: Set counts (replace with actual data fetching)
    if (!ui || !ui->label_available_count || !ui->label_occupied_count) {
        qCritical() << "UI or count labels are null before setting counts.";
    } else {
        ui->label_available_count->setText("142");
        ui->label_occupied_count->setText("58");
        qDebug() << "Count labels updated.";
    }

    // Example: Populate table (replace with actual data)
    if (!ui || !ui->tableWidget_parking_log) {
        qCritical() << "UI or tableWidget_parking_log is null before populating data.";
        return;
    }

    ui->tableWidget_parking_log->setRowCount(0);
    qDebug() << "Table row count set to 0.";

    QList<QStringList> log_data;
    log_data.append({"ABC-123", "2024-05-07 10:00 AM", "2024-05-07 12:30 PM", "Exited"});
    log_data.append({"XYZ-789", "2024-05-07 11:15 AM", "-", "Parked"});
    log_data.append({"TEST-01", "2024-05-07 01:00 PM", "-", "Parked"});
    log_data.append({"CAR-007", "2024-05-06 09:00 AM", "2024-05-06 05:00 PM", "Exited"});

    qDebug() << "Starting table population loop.";

    for (const QStringList &row_data : log_data) {
        int currentRow = ui->tableWidget_parking_log->rowCount();
        ui->tableWidget_parking_log->insertRow(currentRow);
        qDebug() << "Inserted row" << currentRow;
        for (int col = 0; col < row_data.size(); ++col) {
            if (col < ui->tableWidget_parking_log->columnCount()) {
                ui->tableWidget_parking_log->setItem(currentRow, col, new QTableWidgetItem(row_data.at(col)));
                qDebug() << "Set item at (" << currentRow << "," << col << ")";
            } else {
                qWarning() << "Attempted to set item in column" << col << "but table only has" << ui->tableWidget_parking_log->columnCount() << "columns.";
                break;
            }
        }
    }
    qDebug() << "Dashboard data populated successfully.";
}

void DashboardWindow::on_pushButton_logout_clicked()
{
    qDebug() << "Logout button clicked.";
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "Logout", "Are you sure you want to logout?",
                                  QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        if(!loginWindow) {
            loginWindow = new MainWindow(nullptr);
        }
        loginWindow->show();
        this->close();
        qDebug() << "Logged out and showing login window.";
    }
}
